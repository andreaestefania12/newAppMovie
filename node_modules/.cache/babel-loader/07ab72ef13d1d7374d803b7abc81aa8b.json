{"ast":null,"code":"var _jsxFileName = \"E:\\\\kommit\\\\React\\\\my-movie\\\\src\\\\components\\\\Movie.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\"; // Config\n\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config'; // Component \n\nimport BreadCrumb from './BreadCrumb';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from \"./MovieInfoBar\";\nimport Actor from \"./Actor\"; // Hook\n// import { useMovieFetch } from \"../hooks/useMovieFetch\";\n// Image \n\nimport NoImage from '../images/no_image.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Movie = () => {\n  _s();\n\n  const {\n    movieId\n  } = useParams();\n  const {\n    state: movie,\n    loading,\n    error\n  } = useMovieFetch(movieId);\n  if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 24\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Something went wrong...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 22\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BreadCrumb, {\n      movieTitle: movie.original_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieInfo, {\n      movie: movie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieInfoBar, {\n      time: movie.runtime,\n      budget: movie.budget,\n      revenue: movie.revenue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      header: \"Actors\",\n      children: movie.actors.map(actor => /*#__PURE__*/_jsxDEV(Actor, {\n        name: actor.name,\n        character: actor.character,\n        imageUrl: actor.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}` : NoImage\n      }, actor.credit_id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Movie, \"PHP4DjV3zzo7oN83+OH2DGO9G/E=\", true, function () {\n  return [useParams];\n});\n\n_c = Movie;\n\nconst MovieWithParams = props => {\n  _s2();\n\n  return /*#__PURE__*/_jsxDEV(Movie, { ...props,\n    params: useParams()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 34\n  }, this);\n};\n\n_s2(MovieWithParams, \"zmUErVVHtqqM6DIDQ9M8H17P2nM=\", false, function () {\n  return [useParams];\n});\n\n_c2 = MovieWithParams;\nexport default MovMovieWithParamsie;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Movie\");\n$RefreshReg$(_c2, \"MovieWithParams\");","map":{"version":3,"sources":["E:/kommit/React/my-movie/src/components/Movie.js"],"names":["React","useParams","IMAGE_BASE_URL","POSTER_SIZE","BreadCrumb","Grid","Spinner","MovieInfo","MovieInfoBar","Actor","NoImage","Movie","movieId","state","movie","loading","error","useMovieFetch","original_title","runtime","budget","revenue","actors","map","actor","name","character","profile_path","credit_id","MovieWithParams","props","MovMovieWithParamsie"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CACA;;AACA,SAAQC,cAAR,EAAuBC,WAAvB,QAAyC,WAAzC,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;AAEA;;AACA,OAAOC,OAAP,MAAoB,wBAApB;;;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAChB,QAAM;AAACC,IAAAA;AAAD,MAAYX,SAAS,EAA3B;AACA,QAAM;AAACY,IAAAA,KAAK,EAACC,KAAP;AAAcC,IAAAA,OAAd;AAAuBC,IAAAA;AAAvB,MAAgCC,aAAa,CAACL,OAAD,CAAnD;AACA,MAAGG,OAAH,EAAY,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACZ,MAAGC,KAAH,EAAU,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACV,sBACI;AAAA,4BACI,QAAC,UAAD;AAAY,MAAA,UAAU,EAAEF,KAAK,CAACI;AAA9B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,SAAD;AAAW,MAAA,KAAK,EAAEJ;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,YAAD;AACI,MAAA,IAAI,EAAEA,KAAK,CAACK,OADhB;AAEI,MAAA,MAAM,EAAEL,KAAK,CAACM,MAFlB;AAGI,MAAA,OAAO,EAAEN,KAAK,CAACO;AAHnB;AAAA;AAAA;AAAA;AAAA,YAHJ,eAQI,QAAC,IAAD;AAAM,MAAA,MAAM,EAAC,QAAb;AAAA,gBACKP,KAAK,CAACQ,MAAN,CAAaC,GAAb,CAAiBC,KAAK,iBACnB,QAAC,KAAD;AAEI,QAAA,IAAI,EAAEA,KAAK,CAACC,IAFhB;AAGI,QAAA,SAAS,EAAED,KAAK,CAACE,SAHrB;AAII,QAAA,QAAQ,EACJF,KAAK,CAACG,YAAN,GACG,GAAEzB,cAAe,GAAEC,WAAY,GAAEqB,KAAK,CAACG,YAAa,EADvD,GAEEjB;AAPV,SACSc,KAAK,CAACI,SADf;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA,kBADJ;AAyBH,CA9BD;;GAAMjB,K;UACgBV,S;;;KADhBU,K;;AAgCN,MAAMkB,eAAe,GAAGC,KAAK;AAAA;;AAAA,sBAAI,QAAC,KAAD,OAAWA,KAAX;AAAkB,IAAA,MAAM,EAAE7B,SAAS;AAAnC;AAAA;AAAA;AAAA;AAAA,UAAJ;AAAA,CAA7B;;IAAM4B,e;UAAqD5B,S;;;MAArD4B,e;AAEN,eAAeE,oBAAf","sourcesContent":["import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n// Config\r\nimport {IMAGE_BASE_URL,POSTER_SIZE} from '../config';\r\n\r\n// Component \r\nimport BreadCrumb from './BreadCrumb';\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport MovieInfo from './MovieInfo';\r\nimport MovieInfoBar from \"./MovieInfoBar\";\r\nimport Actor from \"./Actor\";\r\n\r\n// Hook\r\n// import { useMovieFetch } from \"../hooks/useMovieFetch\";\r\n\r\n// Image \r\nimport NoImage from '../images/no_image.jpg';\r\n\r\n\r\nconst Movie = () => {\r\n    const {movieId} = useParams();\r\n    const {state:movie, loading, error} = useMovieFetch(movieId);\r\n    if(loading) return <Spinner/>\r\n    if(error) return <div>Something went wrong...</div>;\r\n    return (\r\n        <>\r\n            <BreadCrumb movieTitle={movie.original_title} />\r\n            <MovieInfo movie={movie} />\r\n            <MovieInfoBar \r\n                time={movie.runtime}\r\n                budget={movie.budget} \r\n                revenue={movie.revenue}\r\n            />\r\n            <Grid header='Actors'>\r\n                {movie.actors.map(actor => (\r\n                    <Actor\r\n                        key={actor.credit_id}\r\n                        name={actor.name}\r\n                        character={actor.character}\r\n                        imageUrl={\r\n                            actor.profile_path\r\n                            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                            : NoImage\r\n                        }\r\n                    />\r\n                ))}\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nconst MovieWithParams = props => <Movie {...props} params={useParams()} />\r\n\r\nexport default MovMovieWithParamsie;"]},"metadata":{},"sourceType":"module"}