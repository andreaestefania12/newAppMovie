{"ast":null,"code":"var _jsxFileName = \"E:\\\\kommit\\\\React\\\\my-movie\\\\src\\\\components\\\\Movie.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport { useParams } from \"react-router-dom\"; // Config\n\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config'; // Component \n\nimport BreadCrumb from './BreadCrumb';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from \"./MovieInfoBar\";\nimport Actor from \"./Actor\"; // Hook\n// import { useMovieFetch } from \"../hooks/useMovieFetch\";\n// API\n\nimport API from '../API'; // Image \n\nimport NoImage from '../images/no_image.jpg';\n/*\r\nconst Movie = () => {\r\n    const {movieId} = useParams();\r\n    const {state:movie, loading, error} = useMovieFetch(movieId);\r\n    if(loading) return <Spinner/>\r\n    if(error) return <div>Something went wrong...</div>;\r\n    return (\r\n        <>\r\n            <BreadCrumb movieTitle={movie.original_title} />\r\n            <MovieInfo movie={movie} />\r\n            <MovieInfoBar \r\n                time={movie.runtime}\r\n                budget={movie.budget} \r\n                revenue={movie.revenue}\r\n            />\r\n            <Grid header='Actors'>\r\n                {movie.actors.map(actor => (\r\n                    <Actor\r\n                        key={actor.credit_id}\r\n                        name={actor.name}\r\n                        character={actor.character}\r\n                        imageUrl={\r\n                            actor.profile_path\r\n                            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                            : NoImage\r\n                        }\r\n                    />\r\n                ))}\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Movie extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      movie: {},\n      loading: true,\n      error: false\n    };\n  }\n\n  render() {\n    if (loading) return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 28\n    }, this);\n    if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Something went wrong...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 26\n    }, this);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(BreadCrumb, {\n        movieTitle: movie.original_title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MovieInfo, {\n        movie: movie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MovieInfoBar, {\n        time: movie.runtime,\n        budget: movie.budget,\n        revenue: movie.revenue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        header: \"Actors\",\n        children: movie.actors.map(actor => /*#__PURE__*/_jsxDEV(Actor, {\n          name: actor.name,\n          character: actor.character,\n          imageUrl: actor.profile_path ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}` : NoImage\n        }, actor.credit_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst MovieWithParams = props => {\n  _s();\n\n  return /*#__PURE__*/_jsxDEV(Movie, { ...props,\n    params: useParams()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 34\n  }, this);\n};\n\n_s(MovieWithParams, \"zmUErVVHtqqM6DIDQ9M8H17P2nM=\", false, function () {\n  return [useParams];\n});\n\n_c = MovieWithParams;\nexport default MovMovieWithParamsie;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieWithParams\");","map":{"version":3,"sources":["E:/kommit/React/my-movie/src/components/Movie.js"],"names":["React","Component","useParams","IMAGE_BASE_URL","POSTER_SIZE","BreadCrumb","Grid","Spinner","MovieInfo","MovieInfoBar","Actor","API","NoImage","Movie","state","movie","loading","error","render","original_title","runtime","budget","revenue","actors","map","actor","name","character","profile_path","credit_id","MovieWithParams","props","MovMovieWithParamsie"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CACA;;AACA,SAAQC,cAAR,EAAuBC,WAAvB,QAAyC,WAAzC,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CAEA;AACA;AAEA;;AACA,OAAOC,GAAP,MAAgB,QAAhB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,wBAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAGA,MAAMC,KAAN,SAAoBZ,SAApB,CAA6B;AAAA;AAAA;AAAA,SACzBa,KADyB,GACjB;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,OAAO,EAAE,IAFL;AAGJC,MAAAA,KAAK,EAAC;AAHF,KADiB;AAAA;;AAOzBC,EAAAA,MAAM,GAAE;AACJ,QAAGF,OAAH,EAAY,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACZ,QAAGC,KAAH,EAAU,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACV,wBACI;AAAA,8BACI,QAAC,UAAD;AAAY,QAAA,UAAU,EAAEF,KAAK,CAACI;AAA9B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,SAAD;AAAW,QAAA,KAAK,EAAEJ;AAAlB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,YAAD;AACI,QAAA,IAAI,EAAEA,KAAK,CAACK,OADhB;AAEI,QAAA,MAAM,EAAEL,KAAK,CAACM,MAFlB;AAGI,QAAA,OAAO,EAAEN,KAAK,CAACO;AAHnB;AAAA;AAAA;AAAA;AAAA,cAHJ,eAQI,QAAC,IAAD;AAAM,QAAA,MAAM,EAAC,QAAb;AAAA,kBACKP,KAAK,CAACQ,MAAN,CAAaC,GAAb,CAAiBC,KAAK,iBACnB,QAAC,KAAD;AAEI,UAAA,IAAI,EAAEA,KAAK,CAACC,IAFhB;AAGI,UAAA,SAAS,EAAED,KAAK,CAACE,SAHrB;AAII,UAAA,QAAQ,EACJF,KAAK,CAACG,YAAN,GACG,GAAEzB,cAAe,GAAEC,WAAY,GAAEqB,KAAK,CAACG,YAAa,EADvD,GAEEhB;AAPV,WACSa,KAAK,CAACI,SADf;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA,oBADJ;AAyBH;;AAnCwB;;AAsC7B,MAAMC,eAAe,GAAGC,KAAK;AAAA;;AAAA,sBAAI,QAAC,KAAD,OAAWA,KAAX;AAAkB,IAAA,MAAM,EAAE7B,SAAS;AAAnC;AAAA;AAAA;AAAA;AAAA,UAAJ;AAAA,CAA7B;;GAAM4B,e;UAAqD5B,S;;;KAArD4B,e;AAEN,eAAeE,oBAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n// Config\r\nimport {IMAGE_BASE_URL,POSTER_SIZE} from '../config';\r\n\r\n// Component \r\nimport BreadCrumb from './BreadCrumb';\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport MovieInfo from './MovieInfo';\r\nimport MovieInfoBar from \"./MovieInfoBar\";\r\nimport Actor from \"./Actor\";\r\n\r\n// Hook\r\n// import { useMovieFetch } from \"../hooks/useMovieFetch\";\r\n\r\n// API\r\nimport API from '../API';\r\n\r\n// Image \r\nimport NoImage from '../images/no_image.jpg';\r\n\r\n/*\r\nconst Movie = () => {\r\n    const {movieId} = useParams();\r\n    const {state:movie, loading, error} = useMovieFetch(movieId);\r\n    if(loading) return <Spinner/>\r\n    if(error) return <div>Something went wrong...</div>;\r\n    return (\r\n        <>\r\n            <BreadCrumb movieTitle={movie.original_title} />\r\n            <MovieInfo movie={movie} />\r\n            <MovieInfoBar \r\n                time={movie.runtime}\r\n                budget={movie.budget} \r\n                revenue={movie.revenue}\r\n            />\r\n            <Grid header='Actors'>\r\n                {movie.actors.map(actor => (\r\n                    <Actor\r\n                        key={actor.credit_id}\r\n                        name={actor.name}\r\n                        character={actor.character}\r\n                        imageUrl={\r\n                            actor.profile_path\r\n                            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                            : NoImage\r\n                        }\r\n                    />\r\n                ))}\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n*/\r\n\r\n\r\nclass Movie extends Component{\r\n    state = {\r\n        movie: {},\r\n        loading: true,\r\n        error:false\r\n    }\r\n\r\n    render(){\r\n        if(loading) return <Spinner/>\r\n        if(error) return <div>Something went wrong...</div>;\r\n        return (\r\n            <>\r\n                <BreadCrumb movieTitle={movie.original_title} />\r\n                <MovieInfo movie={movie} />\r\n                <MovieInfoBar \r\n                    time={movie.runtime}\r\n                    budget={movie.budget} \r\n                    revenue={movie.revenue}\r\n                />\r\n                <Grid header='Actors'>\r\n                    {movie.actors.map(actor => (\r\n                        <Actor\r\n                            key={actor.credit_id}\r\n                            name={actor.name}\r\n                            character={actor.character}\r\n                            imageUrl={\r\n                                actor.profile_path\r\n                                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                                : NoImage\r\n                            }\r\n                        />\r\n                    ))}\r\n                </Grid>\r\n            </>\r\n        );\r\n    };\r\n    \r\n}\r\nconst MovieWithParams = props => <Movie {...props} params={useParams()} />\r\n\r\nexport default MovMovieWithParamsie;"]},"metadata":{},"sourceType":"module"}