{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport API from '../API';\nexport const useMovieFetch = movieId => {\n  _s();\n\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const fetchMovie = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(false);\n      const movie = await API.fetchMovie(movieId);\n      const credits = await API.fetchCredits(movieId); // Get directors only\n\n      const directors = credits.crew.filter(member => member.job === 'Director');\n      setState({ ...movie,\n        actors: credits.cast,\n        directors: directors\n      });\n      setLoading(false);\n    } catch (error) {\n      setError(true);\n    }\n  });\n  useEffect(() => {\n    fetchMovie();\n  }, [movieId, fetchMovie]);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useMovieFetch, \"V1Q1ewFYiTBfyAUSmdhQf7Cw3po=\");","map":{"version":3,"sources":["E:/kommit/React/my-movie/src/hooks/useMovieFetch.js"],"names":["useState","useEffect","useCallback","API","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchMovie","movie","credits","fetchCredits","directors","crew","filter","member","job","actors","cast"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,OAAO,MAAMC,aAAa,GAAGC,OAAO,IAAI;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBP,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACQ,OAAD,EAASC,UAAT,IAAuBT,QAAQ,CAAC,IAAD,CAArC;AACA,QAAM,CAACU,KAAD,EAAOC,QAAP,IAAmBX,QAAQ,CAAC,KAAD,CAAjC;AAEA,QAAMY,UAAU,GAAGV,WAAW,CAAE,YAAY;AACxC,QAAG;AACCO,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC,KAAD,CAAR;AAEA,YAAME,KAAK,GAAG,MAAMV,GAAG,CAACS,UAAJ,CAAeP,OAAf,CAApB;AACA,YAAMS,OAAO,GAAG,MAAMX,GAAG,CAACY,YAAJ,CAAiBV,OAAjB,CAAtB,CALD,CAOC;;AACA,YAAMW,SAAS,GAAGF,OAAO,CAACG,IAAR,CAAaC,MAAb,CACdC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB;AAIAb,MAAAA,QAAQ,CAAC,EACL,GAAGM,KADE;AAELQ,QAAAA,MAAM,EAAEP,OAAO,CAACQ,IAFX;AAGLN,QAAAA,SAAS,EAAEA;AAHN,OAAD,CAAR;AAKAP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAlBD,CAkBE,OAAOC,KAAP,EAAa;AACXC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;AACJ,GAtB6B,CAA9B;AAwBAV,EAAAA,SAAS,CAAC,MAAK;AAEXW,IAAAA,UAAU;AACb,GAHQ,EAGP,CAACP,OAAD,EAASO,UAAT,CAHO,CAAT;AAKA,SAAO;AAACN,IAAAA,KAAD;AAAOE,IAAAA,OAAP;AAAeE,IAAAA;AAAf,GAAP;AACH,CAnCM;;GAAMN,a","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport API from '../API';\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state,setState] = useState({});\r\n    const [loading,setLoading] = useState(true);\r\n    const [error,setError] = useState(false);\r\n\r\n    const fetchMovie = useCallback( async () => {\r\n        try{\r\n            setLoading(true);\r\n            setError(false);\r\n\r\n            const movie = await API.fetchMovie(movieId);\r\n            const credits = await API.fetchCredits(movieId);\r\n\r\n            // Get directors only\r\n            const directors = credits.crew.filter(\r\n                member => member.job === 'Director'\r\n            );\r\n\r\n            setState({\r\n                ...movie,\r\n                actors: credits.cast,\r\n                directors: directors \r\n            })\r\n            setLoading(false);\r\n        } catch (error){\r\n            setError(true);\r\n        }\r\n    });\r\n\r\n    useEffect(() =>{\r\n        \r\n        fetchMovie();\r\n    },[movieId,fetchMovie]);\r\n\r\n    return {state,loading,error};\r\n};"]},"metadata":{},"sourceType":"module"}