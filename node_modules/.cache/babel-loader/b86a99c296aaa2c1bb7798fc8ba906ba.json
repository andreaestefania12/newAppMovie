{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\"; // API\n\nimport API from '../API';\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pags: 0,\n  total_results: 0\n};\nconst [state, setState] = useState();\nconst [loading, setLoading] = useState(false);\nconst [error, setError] = useState(false);\nexport const useHomeFetch = () => {\n  _s();\n\n  const fetchMovies = async function (page) {\n    let searchTerm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }; // Initial render\n\n\n  useEffect(() => {\n    fetchMovies(1);\n  }, []);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useHomeFetch, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["E:/kommit/React/my-movie/src/hooks/useHomeFetch.js"],"names":["useState","useEffect","useRef","API","initialState","page","results","total_pags","total_results","state","setState","loading","setLoading","error","setError","useHomeFetch","fetchMovies","searchTerm","movies","prev"],"mappings":";;AAAA,SAASA,QAAT,EAAkBC,SAAlB,EAA4BC,MAA5B,QAA0C,OAA1C,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,CADW;AAEjBC,EAAAA,OAAO,EAAE,EAFQ;AAGjBC,EAAAA,UAAU,EAAE,CAHK;AAIjBC,EAAAA,aAAa,EAAE;AAJE,CAArB;AAOA,MAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBV,QAAQ,EAAjC;AACA,MAAM,CAACW,OAAD,EAASC,UAAT,IAAuBZ,QAAQ,CAAC,KAAD,CAArC;AACA,MAAM,CAACa,KAAD,EAAOC,QAAP,IAAmBd,QAAQ,CAAC,KAAD,CAAjC;AAGA,OAAO,MAAMe,YAAY,GAAG,MAAM;AAAA;;AAC9B,QAAMC,WAAW,GAAG,gBAAOX,IAAP,EAAiC;AAAA,QAApBY,UAAoB,uEAAP,EAAO;;AACjD,QAAI;AACAH,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA,YAAMM,MAAM,GAAG,MAAMf,GAAG,CAACa,WAAJ,CAAgBC,UAAhB,EAA2BZ,IAA3B,CAArB;AAEAK,MAAAA,QAAQ,CAACS,IAAI,KAAK,EACd,GAAGD,MADW;AAEdZ,QAAAA,OAAO,EACHD,IAAI,GAAG,CAAP,GAAW,CAAC,GAAGc,IAAI,CAACb,OAAT,EAAiB,GAAGY,MAAM,CAACZ,OAA3B,CAAX,GAAiD,CAAC,GAAGY,MAAM,CAACZ,OAAX;AAHvC,OAAL,CAAL,CAAR;AAKH,KAVD,CAUE,OAAOO,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAfD,CAD8B,CAkB9B;;;AACAX,EAAAA,SAAS,CAAC,MAAK;AACXe,IAAAA,WAAW,CAAC,CAAD,CAAX;AACH,GAFQ,EAEP,EAFO,CAAT;AAIA,SAAO;AAACP,IAAAA,KAAD;AAAOE,IAAAA,OAAP;AAAeE,IAAAA;AAAf,GAAP;AAEH,CAzBM;;GAAME,Y","sourcesContent":["import { useState,useEffect,useRef } from \"react\";\r\n\r\n// API\r\nimport API from '../API';\r\n\r\nconst initialState = {\r\n    page: 0,\r\n    results: [],\r\n    total_pags: 0,\r\n    total_results: 0\r\n};\r\n\r\nconst [state,setState] = useState();\r\nconst [loading,setLoading] = useState(false);\r\nconst [error,setError] = useState(false);\r\n\r\n\r\nexport const useHomeFetch = () => {\r\n    const fetchMovies = async (page, searchTerm = \"\") => {\r\n        try {\r\n            setError(false);\r\n            setLoading(true);\r\n            const movies = await API.fetchMovies(searchTerm,page);\r\n\r\n            setState(prev => ({\r\n                ...movies,\r\n                results:\r\n                    page > 1 ? [...prev.results,...movies.results] : [...movies.results]\r\n            }));\r\n        } catch (error) {\r\n            setError(true);\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    // Initial render\r\n    useEffect(()=> {\r\n        fetchMovies(1)\r\n    },[]);\r\n\r\n    return {state,loading,error};\r\n\r\n}"]},"metadata":{},"sourceType":"module"}