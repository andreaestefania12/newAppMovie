{"ast":null,"code":"var _jsxFileName = \"E:\\\\kommit\\\\React\\\\my-movie\\\\src\\\\components\\\\Home.js\";\nimport React, { Component } from \"react\"; // Config\n\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from \"../config\"; // Components\n\nimport HeroImage from \"./HeroImage\";\nimport Grid from \"./Grid\";\nimport Thumb from \"./Thumb\";\nimport Spinner from \"./Spinner\";\nimport SearchBar from \"./SearchBar\";\nimport Button from \"./Button\"; // API\n\nimport API from '../API'; // Hook\n// import {useHomeFetch } from '../hooks/useHomeFetch';\n// Image\n\nimport NoImage from '../images/no_image.jpg';\n/*\r\nconst Home = () => {\r\n    const {state, loading,error,searchTerm, setSearchTerm, setIsLoadingMore} = useHomeFetch();\r\n    if(error) return <div>Something went wrong...</div>\r\n    if(state !=undefined){\r\n        return (\r\n            <>\r\n                {!searchTerm && state.results[0] ?\r\n                    <HeroImage \r\n                        image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n                        title={state.results[0].original_title}\r\n                        text={state.results[0].overview}\r\n                    />\r\n                :null} \r\n                <SearchBar setSearchTerm={setSearchTerm}/>\r\n\r\n                <Grid header={searchTerm? 'Search Result' :'Popular Movies'}>\r\n                    {state.results.map(movie => (\r\n                        <Thumb \r\n                            key={movie.id}\r\n                            clickable\r\n                            image={\r\n                                movie.poster_path \r\n                                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path \r\n                                : NoImage\r\n                            }\r\n                            movieId={movie.id}\r\n                        />\r\n                    ))}\r\n\r\n                </Grid>\r\n                {loading && <Spinner />}\r\n                {state.page < state.total_pages && !loading && (\r\n                    <Button text='Load More' callback={() => setIsLoadingMore(true)}></Button>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <></>\r\n    );\r\n}*/\n// CLASS COMPONENT\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pags: 0,\n  total_results: 0\n};\n\nclass Home extends Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n    this.state = {\n      movies: initialState,\n      searchTerm: '',\n      isLoadingMore: false,\n      loading: false,\n      error: false\n    };\n\n    this.fetchMovies = async function (page) {\n      let searchTerm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n      try {\n        _this.setState({\n          error: false,\n          loading: true\n        });\n\n        const movies = await API.fetchMovies(searchTerm, page);\n\n        _this.setState(prev => ({ ...prev,\n          movies: { ...movies,\n            results: page > 1 ? [...prev.movies.results, ...movies.results] : [...movies.results]\n          },\n          loading: false\n        }));\n      } catch (error) {\n        _this.setState({\n          error: true,\n          loading: false\n        });\n      }\n    };\n\n    this.handleSearch = searchTerm => this.setState({\n      movies: initialState,\n      searchTerm\n    }, () => this.fetchMovies(1, this.state.searchTerm));\n\n    this.handleLoadMore = () => this.fetchMovies(this.state.movies.page + 1, this.state.searchTerm);\n  }\n\n  render() {\n    const {\n      searchTerm,\n      movies,\n      loading,\n      error\n    } = this.state;\n    if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Something went wrong...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 26\n    }, this);\n\n    if (movies != undefined) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [!searchTerm && movies.results[0] ? /*#__PURE__*/_jsxDEV(HeroImage, {\n          image: `${IMAGE_BASE_URL}${BACKDROP_SIZE}${movies.results[0].backdrop_path}`,\n          title: movies.results[0].original_title,\n          text: movies.results[0].overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(SearchBar, {\n          setSearchTerm: this.handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          header: searchTerm ? 'Search Result' : 'Popular Movies',\n          children: movies.results.map(movie => /*#__PURE__*/_jsxDEV(Thumb, {\n            clickable: true,\n            image: movie.poster_path ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path : NoImage,\n            movieId: movie.id\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 33\n        }, this), movies.page < movies.total_pages && !loading && /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Load More\",\n          callback: this.handleLoadMore\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["E:/kommit/React/my-movie/src/components/Home.js"],"names":["React","Component","POSTER_SIZE","BACKDROP_SIZE","IMAGE_BASE_URL","HeroImage","Grid","Thumb","Spinner","SearchBar","Button","API","NoImage","initialState","page","results","total_pags","total_results","Home","state","movies","searchTerm","isLoadingMore","loading","error","fetchMovies","setState","prev","handleSearch","handleLoadMore","render","undefined","backdrop_path","original_title","overview","map","movie","poster_path","id","total_pages"],"mappings":"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","sourcesContent":["import React , {Component} from \"react\";\r\n\r\n// Config\r\n\r\nimport { POSTER_SIZE, BACKDROP_SIZE,IMAGE_BASE_URL } from \"../config\";\r\n\r\n// Components\r\nimport HeroImage from \"./HeroImage\";\r\nimport Grid from \"./Grid\";\r\nimport Thumb from \"./Thumb\";\r\nimport Spinner from \"./Spinner\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport Button from \"./Button\";\r\n\r\n\r\n\r\n// API\r\nimport API from '../API';\r\n// Hook\r\n// import {useHomeFetch } from '../hooks/useHomeFetch';\r\n\r\n\r\n// Image\r\nimport NoImage from '../images/no_image.jpg';\r\n/*\r\nconst Home = () => {\r\n    const {state, loading,error,searchTerm, setSearchTerm, setIsLoadingMore} = useHomeFetch();\r\n    if(error) return <div>Something went wrong...</div>\r\n    if(state !=undefined){\r\n        return (\r\n            <>\r\n                {!searchTerm && state.results[0] ?\r\n                    <HeroImage \r\n                        image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n                        title={state.results[0].original_title}\r\n                        text={state.results[0].overview}\r\n                    />\r\n                :null} \r\n                <SearchBar setSearchTerm={setSearchTerm}/>\r\n\r\n                <Grid header={searchTerm? 'Search Result' :'Popular Movies'}>\r\n                    {state.results.map(movie => (\r\n                        <Thumb \r\n                            key={movie.id}\r\n                            clickable\r\n                            image={\r\n                                movie.poster_path \r\n                                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path \r\n                                : NoImage\r\n                            }\r\n                            movieId={movie.id}\r\n                        />\r\n                    ))}\r\n\r\n                </Grid>\r\n                {loading && <Spinner />}\r\n                {state.page < state.total_pages && !loading && (\r\n                    <Button text='Load More' callback={() => setIsLoadingMore(true)}></Button>\r\n                )}\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <></>\r\n    );\r\n}*/\r\n\r\n\r\n// CLASS COMPONENT\r\nconst initialState = {\r\n    page: 0,\r\n    results: [],\r\n    total_pags: 0,\r\n    total_results: 0\r\n};\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        movies: initialState,\r\n        searchTerm: '',\r\n        isLoadingMore: false,\r\n        loading: false,\r\n        error: false\r\n    };\r\n\r\n    fetchMovies = async (page, searchTerm = \"\") => {\r\n        try {\r\n            this.setState({error:false, loading:true});\r\n            const movies = await API.fetchMovies(searchTerm,page);\r\n\r\n            this.setState(prev => ({\r\n                ...prev,\r\n                movies:{\r\n                    ...movies,\r\n                    results:\r\n                        page > 1 ? [...prev.movies.results,...movies.results] : [...movies.results]\r\n                },\r\n                loading: false,\r\n                \r\n            }));\r\n        } catch (error) {\r\n            this.setState({error: true, loading:false});\r\n        }\r\n    };\r\n\r\n    handleSearch = searchTerm => \r\n        this.setState({movies:initialState,searchTerm}, ()=>\r\n            this.fetchMovies(1,this.state.searchTerm)\r\n        );\r\n    \r\n    handleLoadMore = ()=> \r\n        this.fetchMovies(this.state.movies.page +1, this.state.searchTerm);\r\n\r\n    render(){\r\n        const {searchTerm,movies,loading,error} = this.state;\r\n\r\n        if(error) return <div>Something went wrong...</div>\r\n        if(movies !=undefined){\r\n            return (\r\n                <>\r\n                    {!searchTerm && movies.results[0] ?\r\n                        <HeroImage \r\n                            image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${movies.results[0].backdrop_path}`}\r\n                            title={movies.results[0].original_title}\r\n                            text={movies.results[0].overview}\r\n                        />\r\n                    :null} \r\n                    <SearchBar setSearchTerm={this.handleSearch}/>\r\n    \r\n                    <Grid header={searchTerm? 'Search Result' :'Popular Movies'}>\r\n                        {movies.results.map(movie => (\r\n                            <Thumb \r\n                                key={movie.id}\r\n                                clickable\r\n                                image={\r\n                                    movie.poster_path \r\n                                    ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path \r\n                                    : NoImage\r\n                                }\r\n                                movieId={movie.id}\r\n                            />\r\n                        ))}\r\n    \r\n                    </Grid>\r\n                    {loading && <Spinner />}\r\n                    {movies.page < movies.total_pages && !loading && (\r\n                        <Button text='Load More' callback={this.handleLoadMore}></Button>\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    \r\n        return (\r\n            <></>\r\n        );\r\n    }\r\n\r\n}    \r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}